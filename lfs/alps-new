#!/usr/bin/python

import sys
import subprocess
import urllib
import urllib2
import os
import glob
from shutil import copy2
from shutil import move

alpExecutable = sys.argv[0]
basenameAlpExecutable = os.path.basename(alpExecutable)

def runCommand(cmd, actionName):
    p = subprocess.Popen(cmd)
    p.wait()
    if p.returncode != 0:
        print 'Error occured in performing operation: ' + actionName
        print 'Aborting...'
        exit()

class Package:
    def __init__(self, name):
        self.name = name
        self.configPath = '/etc/alps/alps.conf'
        self.configuration = self.loadConfig()
        self.nameFile = self.configuration['SCRIPTS_DIR'] + '/' + self.name + '.sh'
        self.properties = {'DESCRIPTION':'','SECTION':'', 'VERSION':'', 'REVISION':'', 'URL':''}
        self.properties['DESCRIPTION'] = self.getDescription()
        self.properties['SECTION'] = self.getSection()
        self.properties['VERSION'] = self.getVersion()
        self.properties['REVISION'] = self.getRevision()
        self.properties['URL'] = self.getUrl()
        tmp = glob.glob(self.configuration['TGZ_DIR'] + '/' + self.name + '*.tgz')
        if tmp:
            self.nameFileTgz = tmp[0]
        else:
            self.nameFileTgz = ''
        tmp = glob.glob(self.configuration['INSTALLED_FILES_DIR'] + '/'+  self.name + '*.files.gz')
        if tmp:
            self.nameInstalledFilesGz = tmp[0]
        else:
            self.nameInstalledFilesGz = ''
        tmp = glob.glob(self.configuration['INSTALLED_FILES_DIR'] + '/' + self.name + '*.postremove')
        if tmp:
            self.namePostRemoveScript = tmp[0]
        else:
            self.namePostRemoveScript = ''
        tmp = glob.glob(self.configuration['INSTALLED_FILES_DIR'] + '/' + self.name + '*.preremove')
        if tmp:
            self.namePreRemoveScript = tmp[0]
        else:
            self.namePreRemoveScript = ''
        self.required = self.getRequired()
        self.recommended = self.getRecommended()
        self.optional = self.getOptional()
        self.dependent = self.getDependent()
        if glob.glob(self.configuration['INSTALLED_FILES_DIR'] + '/' + self.name + '*.files.gz'):
            self.installed = True
        else:
            self.installed = False

    def loadConfig(self):
        conf = {}
        file = open(self.configPath, 'r')
        data = file.read()
        lines = data.split('\n')
        for line in lines:
            parts = line.split('=')
            if len(parts) == 2:
                conf[parts[0]] = parts[1].replace('"', '');
        return conf

    def getDescription(self):
        try:
            file = open(self.nameFile)
        except:
            print 'Error occured opening ' + self.nameFile + '. Exit'
            exit(1)
        response = ''
        data = file.read()
        lines = data.split('\n')
        for line in lines:
            if line.startswith('DESCRIPTION'):
                fields = line.split('=')
                response = fields[1]
        return response

    def getSection(self):
        try:
            file = open(self.nameFile)
        except:
            print 'Error occured opening ' + self.nameFile + '. Exit'
            exit(1)
        response = ''
        data = file.read()
        lines = data.split('\n')
        for line in lines:
            if line.startswith('SECTION'):
                fields = line.split('=')
                response = fields[1]
        return response

    def getVersion(self):
        try:
            file = open(self.nameFile)
        except:
            print 'Error occured opening ' + self.nameFile + '. Exit'
            exit(1)
        response = ''
        data = file.read()
        lines = data.split('\n')
        for line in lines:
            if line.startswith('VERSION'):
                fields = line.split('=')
                response = fields[1]
        return response

    def getRevision(self):
        try:
            file = open(self.nameFile)
        except:
            print 'Error occured opening ' + self.nameFile + '. Exit'
            exit(1)
        response = ''
        data = file.read()
        lines = data.split('\n')
        for line in lines:
            if line.startswith('REVISION'):
                fields = line.split('=')
                response = fields[1]
        return response

    def getUrl(self):
        try:
            file = open(self.nameFile)
        except:
            print 'Error occured opening ' + self.nameFile + '. Exit'
            exit(1)
        response = ''
        data = file.read()
        lines = data.split()
        for line in lines:
            if line.startswith('URL'):
                fields = line.split('=')
                response = fields[1]
        return response

    def getRequired(self):
        try:
            file = open(self.nameFile)
        except:
            print 'Error occured opening ' + self.nameFile + '. Exit'
            exit(1)
        data = file.read()
        lines = data.split('\n')
        dependencies = []
        for line in lines:
            if line.startswith('#REQ:'):
                if line.replace('#REQ:', '') != '':
                    dependencies.append(line.replace('#REQ:', ''))
        return dependencies

    def getRecommended(self):
        try:
            file = open(self.nameFile)
        except:
            print 'Error occured opening ' + self.nameFile + '. Exit'
            exit(1)
        data = file.read()
        lines = data.split('\n')
        dependencies = []
        for line in lines:
            if line.startswith('#REC:'):
                if line.replace('#REC:', '') != '':
                    dependencies.append(line.replace('#REC:', ''))
        return dependencies

    def getOptional(self):
        try:
            file = open(self.nameFile)
        except:
            print 'Error occured opening ' + self.nameFile + '. Exit'
            exit(1)
        data = file.read()
        lines = data.split('\n')
        dependencies = []
        for line in lines:
            if line.startswith('#OPT:'):
                if line.replace('#OPT:', '') != '':
                    dependencies.append(line.replace('#OPT:', ''))
        return dependencies

    def getDependent(self):
        listScripts = glob.glob(self.configuration['SCRIPTS_DIR'] + '/*')
        packages = []
        for package in listScripts:
            file = open(package)
            data = file.read()
            lines = data.split('\n')
            for line in lines:
                if line.startswith('#REQ:'):
                    string = line.replace('#REQ:', '')
                    if string != '':
                        if (self.name == string.strip()) and (self.name not in packages):
                            packages.append(os.path.splitext(os.path.basename(package))[0])
                if line.startswith('#REC:'):
                    string = line.replace('#REC:', '')
                    if string != '':
                        if (self.name == string.strip()) and (self.name not in packages):
                            packages.append(os.path.splitext(os.path.basename(package))[0])
            file.close()
        return packages

    def install(self, prompt):
        neededPackages = self.getNeededPackages()
        if not self.installed:
            if prompt:
                if neededPackages:
                    print 'The following packages would be installed: ' + " ".join(neededPackages)
                resp = raw_input('Are you sure? (y/N) ')
                if resp.lower() == 'y':
                    for pkg in neededPackages:
                        p = Package(pkg)
                        p.install(prompt)
                else:
                    exit()
            else:
                for pkg in neededPackages:
                    p = Package(pkg)
                    p.install(prompt)
            print 'install=>' + self.name
            self.__installPkg()
        else:
            print 'Package ' + self.name + ' is already installed.'

    def build(self, prompt):
        neededPackages = self.getNeededPackages()
        if neededPackages:
            if prompt:
                if neededPackages:
                    print 'The following packages would be installed: ' + " ".join(neededPackages)
                resp = raw_input('Are you sure? (y/N) ')
                if resp.lower() == 'y':
                    for pkg in neededPackages:
                        p = Package(pkg)
                        p.install(prompt)
                else:
                    exit()
            else:
                for pkg in neededPackages:
                    p = Package(pkg)
                    p.install(prompt)
        print 'build=>' + self.name
        self.__buildPkg()

    def remove(self,prompt):
        if self.installed:
            neededPackages = self.getNeededPackages()
            if prompt:
                if neededPackages:
                    print 'The following packages would be installed: ' + " ".join(neededPackages)
                resp = raw_input('Are you sure? (y/N) ')
                if resp.lower() == 'y':
                    for pkg in neededPackages:
                        p = Package(pkg)
                        p.install()
                else:
                    exit()
            else:
                for pkg in neededPackages:
                    p = Package(pkg)
                    p.install()
            print 'remove=>' + self.name
            self.__removePkg(prompt)
        else:
            print 'Package ' + self.name + ' is not installed.'

    def show(self):
        print 'name=>' + self.name
        print 'nameFile =>' + self.nameFile
        print 'nameFileTgz =>' + self.nameFileTgz
        print 'nameInstalledFilesGz=>' + self.nameInstalledFilesGz
        print 'required=>'
        for i in self.required:
            print '\t' + i
        print 'recommended=>'
        for i in self.recommended:
            print '\t' + i
        print 'dependent=>'
        for i in self.dependent:
            print '\t' + i
        print 'description=>' + self.properties['DESCRIPTION']
        print 'section=>' + self.properties['SECTION']
        print 'version=>' + self.properties['VERSION']
        print 'revision=>' + self.properties['REVISION']
        print 'url=>' + self.properties['URL']
        print 'needed packages=>' + " ".join(self.getNeededPackages())

    def getNeededPackages(self):
        packages = []
        neededs = []
        neededs.extend(self.required)
        neededs.extend(self.recommended)
        if not self.installed:
            for i in neededs:
                pack = Package(i)
                if not pack.installed:
                    packages.append(i)
                    packages.extend(pack.getNeededPackages())
        return packages

    def __installPkg(self):
        print 'installPkg '  + self.name
        if not self.nameFileTgz:
            self.__buildPkg()
        if self.nameFileTgz:
            os.chdir('/')
            runCommand(['tar', '-xzvf', self.nameFileTgz], 'install package')
            runCommand(['sh', '/install/doinst.sh'], 'post install')
            name = glob.glob('/install/*.files.gz')
            runCommand(['cp', '-vf', name[0], self.configuration['INSTALLED_FILES_DIR']], 'copy installed files')
            self.nameInstalledFilesGz = self.configuration['INSTALLED_FILES_DIR'] + '/' + name[0]
            name = glob.glob('/install/*.postremove')
            runCommand(['cp', '-vf', name[0], self.configuration['INSTALLED_FILES_DIR']], 'copy postremove files')
            self.namePostRemoveScript = self.configuration['INSTALLED_FILES_DIR'] + '/' + name[0]
            name = glob.glob('/install/*.preremove')
            runCommand(['cp', '-vf', name[0], self.configuration['INSTALLED_FILES_DIR']], 'copy preremove files')
            self.namePreRemoveScript = self.configuration['INSTALLED_FILES_DIR'] + '/' + name[0]
            runCommand(['rm', '-rvf', '/install'], 'remove install')

    def __buildPkg(self):
        print 'buildPkg ' + self.name
        os.chdir('/tmp')
        if glob.glob(self.configuration['TGZ_DIR'] + '/' + self.name + '*.tgz'):
            print self.name + ' already build'
            return
        process = subprocess.Popen([self.configuration['SCRIPTS_DIR'] + '/' + self.name + '.sh | tee -a |gzip > ' + self.configuration['LOGS_DIR'] + '/' + self.name + '.log.gz'], shell=True)
        returncode = process.wait()
        if returncode != 0:
            print 'Error occured while building/installing ' + self.name + '. Aborting.'
            exit(1)
        else:
            name = glob.glob('/tmp/' + self.name + '*.tgz')
            print name
            move(name[0], self.configuration['TGZ_DIR'] + '/')
            self.nameFileTgz = self.configuration['TGZ_DIR'] + '/' + os.path.basename(name[0])

    def __removePkg(self):
        print 'removePkg ' + self.name
        removed_files = []
        if self.nameInstalledFilesGz:
            runCommand(['gunzip', '-vkf', self.nameInstalledFilesGz], 'gunzip file')
            realName = glob.glob(self.configuration['INSTALLED_FILES_DIR'] + '/' + self.name + '*.files')
            try:
                f = open(realName[0], 'r')
            except:
                print 'Error opening' + self.name + '.files.\nNot removing.'
                return
            data = f.read()
            lines = data.split('\n')
            for line in lines:
                if os.path.isfile(line):
                    try:
                        os.remove(line)
                        print 'removed=>' + line
                        removed_files.append(line)
                    except:
                        print 'error occured removing file'
                elif os.path.isdir(line):
                    try:
                        os.rmdir(line)
                        removed_files.append(line)
                    except:
                        print 'Not remove ' + line + ' directory.'
            f.close()
            if self.namePostRemoveScript:
                runCommand(['sh', self.namePostRemoveScript], 'post remove script')
                runCommand(['rm' , '-vf', self.namePostRemoveScript], 'post remove script')
                self.namePostRemoveScript = ''
            if self.namePreRemoveScript:
                runCommand(['sh', self.namePreRemoveScript], 'pre remove script')
                runCommand(['rm' , '-vf', self.namePreRemoveScript], 'post remove script')
                self.namePreRemoveScript = ''
                runCommand(['rm', '-vf', realName[0], self.nameInstalledFilesGz], 'remove temp file')
                self.nameInstalledFilesGz = ''
            if self.nameFileTgz:
                runCommand(['rm', '-vf', self.nameFileTgz], 'remove tgz file')
            else:
                print self.name + ' is not installed.'

def help():
        print 'Usage : alps <command> [packages...]'
        print 'Where <command> can be one of the following:\n'
        print 'install                  Install packages if not installed'
        print 'remove                   Remove installed packages'
        print 'reinstall                Force installation of an already installed package'
        print 'build                    Build package tgz'
        print 'updatescripts            Update the package build scripts'
        print 'selfupdate               Update alps to latest version online'
        print 'clean                    Clean up the working directory'
        print 'src <url>                download tarball from specified'
        print 'showall                  Show the list of all buildscripts'
        print 'showall <wildcards>      List all buildscripts matching the wildcards. Wildcards should be enclosed in quotes.'
        print 'showinstalled            Show the list of all installed packages'
        print 'help                     Print this message\n'
        print 'Examples:\n'
        print 'alps install vlc        # This would build/install vlc'
        print 'alps clean              # This would clean the build directory'
        print 'alps showall "*mate*"   # This would show all package names with the word mate in them'

def updateAction():
    file = open('/etc/lsb-release', 'r')
    data = file.read()
    lines = data.split('\n')
    for line in lines:
        parts = line.split('=')
        if len(parts) > 1:
            if parts[0] == 'DISTRIB_RELEASE':
                version = parts[1].replace('"', '')
                try:
                    os.remove("/tmp/" + version + ".zip")
                except Exception:
                    pass
                try:
                    print 'Downloading scripts from github...'
                    response = urllib2.urlopen("https://github.com/mortaromarcello/aryalinux/archive/" + version + ".zip")
                    urllib.urlretrieve ('https://github.com/mortaromarcello/aryalinux/archive/' + version + '.zip', '/tmp/' + version + '.zip')
                    runCommand(["unzip", "-qq", "-o", "/tmp/" + version+ ".zip", "aryalinux-" + version + "/blfs-new/*", "-d", "/tmp"], "Extraction of scripts tarball")
                    files = glob.glob("/tmp/aryalinux-" + version + "/blfs-new/*.sh")
                    for f in files:
                        os.chmod(f, 0755)
                        copy2(f, '/var/cache/alps/scripts')
                    print 'Scripts updated successfully'
                except urllib2.URLError:
                    print 'Could not download the scripts tarball. Aborting.'
                try:
                    os.remove("/tmp/" + version + ".zip")
                    runCommand(["rm", "-rf", "/tmp/aryalinux-" + version], "Cleaning up")
                except Exception:
                    pass

def selfUpdateAction():
    try:
        os.remove('/tmp/' + basenameAlpExecutable)
    except Exception:
        pass
    try:
        print 'Fetching the latest version of alps...'
        response = urllib2.urlopen('http://github.com/mortaromarcello/aryalinux/raw/2016.11/lfs/' + basenameAlpExecutable)
        urllib.urlretrieve('http://github.com/mortaromarcello/aryalinux/raw/2016.11/lfs/' + basenameAlpExecutable, '/tmp/' + basenameAlpExecutable)
        os.chmod('/tmp/' + basenameAlpExecutable, 0755)
        runCommand(['sudo', 'mv', '-f', '/tmp/' + basenameAlpExecutable, alpExecutable], 'Moving ' + basenameAlpExecutable + ' from temp location to /usr/bin');
        print basenameAlpExecutable + ' updated successfully'
    except Exception, e:
        print 'Error occured in updating ' + basenameAlpExecutable + '. ' + str(e)
        print 'Aborting'

class Main:
    def __init__(self):
        self.nameExecutable = os.path.basename(sys.argv[0])
        self.args = sys.argv
        self.args.remove(sys.argv[0])
        self.command = self.getCommand()
        self.options = self.getOptions()
        self.params = self.getParams()
        self.pkgs = self.setPkg()
        self.prompt = True

    def getCommand(self):
        ret = ''
        for i in self.args:
            if i == 'build' or i == 'install' or i == 'remove' or i == 'show' or i == 'selfupdate' or i == 'updatescripts':
                ret = i
        return ret

    def getOptions(self):
        ret = []
        for i in self.args:
            if i.startswith("-"):
                ret.append(i)
        return ret

    def getParams(self):
        ret = []
        for i in self.args:
            if  i != 'install' and i != 'build' and i != 'remove' and i != 'show' and i != 'selfupdate' and i != 'updatescripts' and not i.startswith("-"):
                ret.append(i)
        return ret

    def setPkg(self):
        ret = []
        for i in self.params:
            ret.append(Package(i))
        return ret

    def parseargs(self):
        if not self.command:
            help()
            exit()
        for opt in self.options:
            if opt == '-y' or opt == '--yes':
                self.prompt = False
        if self.command == 'install':
            for i in self.pkgs:
                i.install(self.prompt)
                exit()
        if self.command == 'build':
            for i in self.pkgs:
                i.build(self.prompt)
                exit()
        if self.command == 'remove':
            for i in self.pkgs:
                i.remove(self.prompt)
                exit()
        if self.command == 'show':
            for i in self.pkgs:
                i.show()
                exit()
        if self.command == 'selfupdate':
            selfUpdateAction()
            exit()
        if self.command == 'updatescripts':
            updateAction()
            exit()
        if self.args[1] == '--help' or self.args[1] == 'help':
            help()
            exit()
        print 'Invalid command ' + self.args[1] + '\n'
        help()

    def main(self):
        self.parseargs()

if __name__ == "__main__":
    main = Main()
    main.main()
