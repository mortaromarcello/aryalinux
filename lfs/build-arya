#!/usr/bin/python

import os
import pwd
import subprocess
import sys
from subprocess import check_output
import getpass
from Crypto.Cipher import AES
import base64

propsFile = 'build-properties'

passwords = {}
encoded_passwords = {}

secret_key = '13fFgYjK7iOyG564'
cipher = AES.new(secret_key,AES.MODE_ECB)

def getpassword(prompt, promptagain):
	password1 = getpass.getpass(prompt)
	password2 = getpass.getpass(promptagain)
	if password1 == password2:
		return password1.rjust(32)
	else:
		print 'Passwords do not match. Retrying...'
		return getpassword(prompt, promptagain)

def runWithEnvAs(user, commands, env, cwd):
	userRecord = pwd.getpwnam(user)
	userUid = userRecord.pw_uid
	userGid = userRecord.pw_gid
	process = subprocess.Popen(
		commands, preexec_fn=demote(userUid, userGid), cwd=cwd, env=env
	)
	result = process.wait()
	if result != 0:
		exit()

def demote(user_uid, user_gid):
	def result():
		os.setgid(user_gid)
		os.setuid(user_uid)
	return result

def runScriptWithEnvAs(user, script, env, cwd):
	runWithEnvAs(user, ['/bin/bash', script], env, cwd)

def runScript(script, cwd):
	process = subprocess.Popen(['/bin/bash', script], cwd=cwd)
	result = process.wait()
	if result != 0:
		exit()

def runScriptWithArgs(script, cwd, args):
	lst = ['/bin/bash', script]
	lst.extend(args)
	process = subprocess.Popen(lst, cwd=cwd)
	result = process.wait()
	if result != 0:
		exit()

def readInput(message, varName, fileName, defaultValue, append=True, interactive=True):
	if append:
		with open(fileName, 'a') as f:
			if interactive:
				response = raw_input(message)
				if response == '':
					response = defaultValue
			else:
				response = defaultValue
			f.write(varName + '="' + response + '"\n')
	else:
		with open(fileName, 'w') as f:
			if interactive:
				response = raw_input(message)
				if response == '':
					response = defaultValue
			else:
				response = defaultValue
			f.write(varName + '="' + response + '"\n')

def getParamValue(paramName):
	with open(propsFile) as f:
		for line in f:
			if line.startswith(paramName):
				return line.replace(paramName, '').replace('"', '').replace('=', '', 1).strip()
	return None

def makeLogEntry(message, logFile):
	with open(logFile, 'a') as f:
		f.write(message + '\n')

def logCurrentStage(stageName):
	if os.path.exists('/sources/currentstage'):
		with open('/sources/currentstage', 'w') as f:
			f.write(stageName)

def getCurrentStage():
	try:
		with open('/sources/currentstage', 'r') as f:
			line = f.readline()
		return line.strip()
	except:
		return 0

def inputBuildProperties():
	readInput("Bootloader Device: ", 'DEV_NAME', propsFile, '', False)
	readInput("Root Partition: ", 'ROOT_PART', propsFile, '')
	readInput("Home Partition: ", 'HOME_PART', propsFile, '')
	if getParamValue('HOME_PART') != '':
		readInput('Format Home Partition? (y/N): ', 'FORMAT_HOME', propsFile, 'n')
	readInput("Swap Partition: ", 'SWAP_PART', propsFile, '')
	if getParamValue('SWAP_PART') != '':
		readInput('Format swap partition? (y/N): ', 'FORMAT_SWAP', propsFile, 'n')
	readInput("Locale: (e.g. it_IT.utf8) ", 'LOCALE', propsFile, 'it_IT.utf8')
	readInput("OS Name: ", 'OS_NAME', propsFile, 'AryaLinux')
	readInput("OS Version: ", 'OS_VERSION', propsFile, '2016.11')
	readInput("OS Codename: ", 'OS_CODENAME', propsFile, 'Dhruv')
	readInput("Domain Name: ", 'DOMAIN_NAME', propsFile, 'aryalinux.org')
	readInput("Keyboard Layout: (e.g. us, fr) ", 'KEYBOARD', propsFile, 'it')
	readInput("Printer Paper Size: (A4/letter) ", 'PAPER_SIZE', propsFile, 'A4')
	readInput('Enter full name: ', 'FULLNAME', propsFile, 'AryaLinux Dhruv')
	readInput('Username: ', 'USERNAME', propsFile, 'aryalinux')
	readInput('Computer Name: ', 'HOST_NAME', propsFile, 'aryalinux-dhruv')
	readInput('Create backups? (y/N) ', 'CREATE_BACKUPS', propsFile, 'n')
	readInput("Install X Server? (y/N) ", 'INSTALL_XSERVER', propsFile, 'n')
	if getParamValue('INSTALL_XSERVER') == 'y' or getParamValue('INSTALL_XSERVER') == 'Y':
		readInput("Install Desktop Environment? (y/N) ", 'INSTALL_DESKTOP_ENVIRONMENT', propsFile, 'n')
		if getParamValue('INSTALL_DESKTOP_ENVIRONMENT') == 'y' or getParamValue('INSTALL_DESKTOP_ENVIRONMENT') == 'Y':
			readInput("Choose the Desktop Environment you want to install:\n1) XFCE\n2) Mate\n3) KDE\n4) Gnome\n5) LXDE\n\nEnter your choice (1-5): ", 'DESKTOP_ENVIRONMENT', propsFile, '2')
	passwords['root'] = getpassword('Enter the root password : ', 'Re-enter the root password : ')
	encoded_passwords['root'] = base64.b64encode(cipher.encrypt(passwords['root']))
	passwords['user'] = getpassword('Enter the user password : ', 'Re-enter the user password : ')
	encoded_passwords['user'] = base64.b64encode(cipher.encrypt(passwords['user']))
	readInput('', 'ROOT_ENCPASSWORD', propsFile, encoded_passwords['root'], True, False)
	readInput('', 'USER_ENCPASSWORD', propsFile, encoded_passwords['user'], True, False)

def freshBuild(startFrom):
	startFrom = int(startFrom)

	if startFrom == 1:
		logCurrentStage('1')
		inputBuildProperties()
		startFrom = startFrom + 1
	else:
		passwords['root'] = cipher.decrypt(base64.b64decode(getParamValue('ROOT_ENCPASSWORD')))
		passwords['user'] = cipher.decrypt(base64.b64decode(getParamValue('USER_ENCPASSWORD')))

	if startFrom == 2:
		try:
			logCurrentStage('2')
			runScript('stage1.sh', None)
			startFrom = startFrom + 1
		except:
			print 'Error occured while executing stage 1'
			exit()

	if startFrom == 3:
		logCurrentStage('3')
		env={}
		LFS='/mnt/lfs'
		LC_ALL='POSIX'
		LFS_TGT=check_output("echo $(uname -m)-lfs-linux-gnu", shell=True).strip('\n')
		PATH='/tools/bin:/bin:/usr/bin'

		env['LFS'] = LFS
		env['LC_ALL'] = LC_ALL
		env['PATH'] = PATH
		env['LFS_TGT']=LFS_TGT

		try:
			runScriptWithEnvAs('lfs', 'stage2.sh', env, '/home/lfs')
			startFrom = startFrom + 1
		except:
			print 'Error occured while executing stage 2'
			exit()

	if startFrom == 4:
		logCurrentStage('4')
		try:
			runScript('/sources/stage3.sh', '/sources')
			startFrom = startFrom + 1
		except:
			print 'Error occured while running stage 3'
			exit()

	if startFrom == 5:
		print 'Starting stage 5'
		logCurrentStage('5')
		try:
			runScript('/sources/stage6.sh', '/sources')
			startFrom = startFrom + 1
		except:
			print 'Error occured while running stage 4'
			exit()
	try:
			pr = subprocess.Popen(['./enteral.sh /sources/final-stage.sh "' + passwords['root'] + '" "' + passwords['user'] + '"'], shell=True)
			pr.wait()
	except Exception as ex:
		print ex

	if getParamValue('CREATE_BACKUPS') == 'y' or getParamValue('CREATE_BACKUPS') == 'Y':
		try:
			files = os.listdir('/mnt/lfs/sources')
			found = False
			for file in files:
				if file.startswith('aryalinux') and 'base-system' in file and file.endswith('.tar.xz'):
					found = True
					break
				if not found:
					p = subprocess.Popen(['./strip-debug.sh'], shell=True)
					p.wait()
					p = subprocess.Popen(['./backup.sh base-system y'], shell=True)
					p.wait()
				else:
					print 'Base system backup already present. Not creating again'
		except:
			print 'Error occured while backing up base-system. Aborting.'
			exit()

	if startFrom == 6:
		if getParamValue('INSTALL_XSERVER') == 'y' or getParamValue('INSTALL_XSERVER') == 'Y':
			try:
				logCurrentStage('6')
				runScriptWithArgs('/sources/enteral.sh', '/sources', ['/sources/apps/essentials.sh', getParamValue('USERNAME')])
				runScriptWithArgs('/sources/enteral.sh', '/sources', ['/sources/apps/app.sh', getParamValue('USERNAME'), 'xserver-meta'])
				startFrom = startFrom + 1
				if getParamValue('CREATE_BACKUPS') == 'y' or getParamValue('CREATE_BACKUPS') == 'Y':
					try:
						files = os.listdir('/mnt/lfs/sources/')
						found = False
						for file in files:
							if file.startswith('aryalinux') and 'base-system-with-xserver' in file and file.endswith('.tar.xz'):
								found = True
								break
							if not found:
								p = subprocess.Popen(['./strip-debug.sh'], shell=True)
								p.wait()
								p = subprocess.Popen(['./backup.sh base-system-with-xserver n'], shell=True)
								p.wait()
							else:
								print 'X-Server backup already present. Not backing up again.'
					except:
						print 'Error occured while backing up base-system-with-xserver. Aborting.'
						exit()
			except:
				print 'Error occured in the installation of x-server'
				exit()


	if startFrom == 7:
		if getParamValue('INSTALL_DESKTOP_ENVIRONMENT') == 'y' or getParamValue('INSTALL_DESKTOP_ENVIRONMENT') == 'Y':
			try:
				logCurrentStage('7')
				if getParamValue('DESKTOP_ENVIRONMENT') == '2':
					desktopEnv = 'mate'
					runScriptWithArgs('/sources/enteral.sh', '/sources', ['/sources/apps/app.sh', getParamValue('USERNAME'), 'mate-desktop-environment'])
				elif getParamValue('DESKTOP_ENVIRONMENT') == '1':
					desktopEnv = 'xfce'
					runScriptWithArgs('/sources/enteral.sh', '/sources', ['/sources/apps/app.sh', getParamValue('USERNAME'), 'xfce-desktop-environment'])
				startFrom = startFrom + 1
				if getParamValue('CREATE_BACKUPS') == 'y' or getParamValue('CREATE_BACKUPS') == 'Y':
					try:
							files = os.listdir('/mnt/lfs/sources/')
							found = False
							for file in files:
									if file.startswith('aryalinux') and 'base-system-with-' + desktopEnv in file and file.endswith('.tar.gz'):
											found = True
											break
							if not found:
									p = subprocess.Popen(['./strip-debug.sh'], shell=True)
									p.wait()
									p = subprocess.Popen(['./backup.sh base-system-with-' + desktopEnv + ' n'], shell=True)
									p.wait()
							else:
									print 'Desktop environment backup already present. Not backing up again.'
					except:
							print 'Error occured while backing up base-system-with-' + desktopEnv + '. Aborting.'
							exit()
			except:
				print 'Error occured in the installation of desktop environment'
				exit()

	pr = subprocess.Popen(['./createlivedisk.sh'], shell=True)
	pr.wait()

print 'Do you want to start a new build or resume a build that was previously started ?'
print '1. Start a fresh build'
print '2. Resume the last build'
print '3. Resume from a certain stage'
response = raw_input('Enter your choice (1 ... 2): ')
if response == '1':
	freshBuild(1)
elif response == '2':
	rootPartition = raw_input('Enter the root partition where the build was in progress. Enter to exit: ')
	if rootPartition != '':
		if os.path.exists('/mnt/lfs/dev'):
						try:
								check_output('umount -v /mnt/lfs/dev/pts', shell=True)
								check_output('umount -v /mnt/lfs/dev', shell=True)
								check_output('umount -v /mnt/lfs/sys', shell=True)
								check_output('umount -v /mnt/lfs/proc', shell=True)
								check_output('umount -v /mnt/lfs/run', shell=True)
								print 'Package builder directories unmounted successfully'
						except:
								print 'Un-mounting wasnt successful. Continuing without it...'

		if not os.path.exists('/mnt/lfs/sources/build-properties'):
			runScript('./umountal.sh', None)
			check_output('rm -rf /sources', shell=True)
			check_output('rm -rf /mnt/lfs', shell=True)
			check_output('mkdir -pv /mnt/lfs', shell=True)
			check_output('mount -v ' + rootPartition + ' /mnt/lfs', shell=True)
			check_output('ln -svf /mnt/lfs/sources /', shell=True)
		if os.path.exists('/sources/build-properties'):
			stage = getCurrentStage()
			freshBuild(stage)
		else:
			check_output('./umountal.sh', shell=True)
			print 'This is not the partition where build was in progress. Cannot continue. Exiting.'
			print 'Please re-run this script with right inputs.'
elif response == '3':
	print 'This function has not been implemented.'
	pass
