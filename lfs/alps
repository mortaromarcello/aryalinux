#!/usr/bin/python

import sys
#import time
import subprocess
import urllib
import urllib2
import os
import glob
from shutil import copy2
from shutil import move

global configuration
global traversed

traversed = []

alpsExecutable = '/usr/bin/alps'

def help():
        print 'Usage : alps <command> [packages...]'
        print 'Where <command> can be one of the following:\n'
        print 'install                  Install packages if not installed'
        print 'remove                   Remove installed packages'
        print 'reinstall                Force installation of an already installed package'
        print 'build                    Build package tgz'
        print 'updatescripts            Update the package build scripts'
        print 'selfupdate               Update alps to latest version online'
        print 'clean                    Clean up the working directory'
        print 'src <url>                download tarball from specified'
        print 'showall                  Show the list of all buildscripts'
        print 'showall <wildcards>      List all buildscripts matching the wildcards. Wildcards should be enclosed in quotes.'
        print 'showinstalled            Show the list of all installed packages'
        print 'help                     Print this message\n'
        print 'Examples:\n'
        print 'alps install vlc        # This would build/install vlc'
        print 'alps clean              # This would clean the build directory'
        print 'alps showall "*mate*"   # This would show all package names with the word mate in them'

def loadInstalled():
    file = open(configuration['INSTALLED_LIST'], 'r')
    data = file.read()
    lines = data.split('\n')
    for line in lines:
        parts = line.split('=')
        if len(parts) > 1:
            traversed.append(parts[0])

def loadConfig(configPath):
    conf = {}
    if configPath == None:
        configPath = '/etc/alps/alps.conf'
    file = open(configPath, 'r')
    data = file.read()
    lines = data.split('\n')
    for line in lines:
        parts = line.split('=')
        if len(parts) == 2:
            conf[parts[0]] = parts[1].replace('"', '');
    return conf

def addToQueue(packageName, dependencyQueue):
    if packageName not in dependencyQueue:
        try:
            file = open(configuration['SCRIPTS_DIR'] + '/' + packageName + '.sh')
            data = file.read()
            lines = data.split('\n')
            dependencies = []
            for line in lines:
                if line.startswith('#REQ:'):
                    if line.replace('#REQ:', '') != '':
                        dependencies.append(line.replace('#REQ:', ''))
                if line.startswith('#REC:'):
                    if line.replace('#REC:', '') != '':
                        dependencies.append(line.replace('#REC:', ''))

            for dependency in dependencies:
                if dependency not in traversed:
                    traversed.append(dependency)
                    addToQueue(dependency, dependencyQueue)
            if packageName not in dependencyQueue:
                dependencyQueue.append(packageName)
        except:
            print 'Error opening ' + packageName + '.sh' + '(script not exist?)'
            exit(1)

def getDependencies(packageName):
    if packageName != '':
        dependencyQueue = []
        addToQueue(packageName, dependencyQueue)
        traversed.append(packageName)
        return dependencyQueue
    else:
        return []

def mergeArrays(array1, array2):
    for item in array2:
        if item not in array1:
            array1.append(item)

def getAllDependencies(packages):
    allDependencies = []
    for package in packages:
        if package not in traversed:
            dependencies = getDependencies(package)
            mergeArrays(allDependencies, dependencies)
            traversed.append(package)
    return allDependencies

def getConfirmation(packages, action, prompt=True):
    if action == 'install':
        print 'The following packages would be installed:\n'
    elif action == 'remove':
        print 'The following packages would be removed:\n'
    for package in packages:
        print package
    if prompt:
        resp = raw_input('Are you sure? (y/N) ')
    else:
        resp = 'y'
    if resp == 'Y' or resp == 'y':
        for package in packages:
            if action == 'install':
                if os.path.exists(configuration['TGZ_DIR']+'/'+package+'.tgz'):
                    print 'runPackageInstall(' + package + ')'
                    runPackageInstall(package)
                else:
                    runPackageBuildTgz(package)
                    print 'runPackageInstall(' + package + ')'
                    runPackageInstall(package)
            elif action == 'remove':
                runPackageRemove(package)

def isSourceOnly(packageName):
        with open('/var/cache/alps/scripts/' + packageName + '.sh') as f:
                lines = f.readlines()
                sourceOnly = False
                for line in lines:
                        if line.strip() == 'SOURCE_ONLY=y':
                                sourceOnly = True
                                break
        return sourceOnly

def runPackageBuildTgz(packageName):
    print 'runPackageBuildTgz'
    os.chdir('/tmp')
    if glob.glob(configuration['TGZ_DIR']+'/'+packageName+'*.tgz'):
        print packageName + ' already build'
        return
    process = subprocess.Popen(['/var/cache/alps/scripts/' + packageName + '.sh | tee -a /var/cache/alps/logs/' + packageName + '.log'], shell=True)
    returncode = process.wait()
    if returncode != 0:
        print 'Error occured while building/installing ' + packageName + '. Aborting.'
        exit(1)
    else:
        name = glob.glob('/tmp/' + packageName + '*.tgz')
        print name
        move(name[0], configuration['TGZ_DIR'] + '/')

def runPackageInstall(packageName):
    print 'runPackageInstall'
    if glob.glob(configuration['INSTALLED_FILES_DIR'] + '/' + packageName + '*.files*'):
        print packageName + ' already installed'
        return
    name = glob.glob(configuration['TGZ_DIR'] + '/' + packageName + '*.tgz')
    if name:
        installPkg(name[0])

def runPackageRemove(packageName):
    print "runPackageRemove " + packageName
    removed_files = []
    realNameGz = glob.glob(configuration['INSTALLED_FILES_DIR'] + '/' + packageName + '*.files.gz')
    print realNameGz
    if realNameGz:
        runCommand(['gunzip', '-vkf', realNameGz[0]], 'gunzip file')
        realName = glob.glob(configuration['INSTALLED_FILES_DIR'] + '/' + packageName + '*.files')
        try:
            f = open(realName[0], 'r')
        except:
            print 'Error opening' + packageName + '.files.\nNot removing.'
            return
        data = f.read()
        lines = data.split('\n')
        for line in lines:
            if os.path.isfile(line):
                try:
                    os.remove(line)
                    print 'removed=>' + line
                    removed_files.append(line)
                except:
                    print 'error occured removing file'
            elif os.path.isdir(line):
                try:
                    os.rmdir(line)
                    removed_files.append(line)
                except:
                    print 'Not remove ' + line + 'directory.'
        f.close()
        doRemoveName = glob.glob(configuration['INSTALLED_FILES_DIR'] + '/' + packageName + '*.postremove')
        if doRemoveName:
            runCommand(['sh', doRemoveName[0]], 'post removed script')
        runCommand(['rm', '-vf', realName[0], realNameGz[0]], 'remove temp file')
    else:
        print packageName + ' is not installed.'

#def runPackageInstall(packageName):
#   if isSourceOnly(packageName) or ( 'PKG_BUILDER' in os.environ and os.environ['PKG_BUILDER'] != 'chandrakant'):
#       print 'SOURCE_ONLY :: Building/Installing ' + packageName + '.sh'
#       returncode = subprocess.call('/var/cache/alps/scripts/' + packageName + '.sh | tee -a /var/cache/alps/logs/' + packageName + '.log', shell=True)
#       if returncode != 0:
#           print 'Error occured while building/installing ' + packageName + '. Aborting.'
#           exit(1)
#   else:
#       print 'SOURCE_BINARY :: Building and creating binaries for ' + packageName + '.sh'
#       if os.path.exists('/var/cache/alps/scripts/' + packageName + '-appconfig.sh'):
#           print 'Running pre-installation tasks...'
#           returncode = subprocess.call('sudo /var/cache/alps/scripts/' + packageName + '-appconfig.sh preinstall | tee -a /var/cache/alps/logs/' + packageName + '.log', shell=True)
#           if returncode != 0:
#               print 'Pre-installation tasks failed for ' + packageName + '.sh. Aborting.'
#               exit(1)
#           else:
#               print 'Pre-Installation tasks succeeded. Running build-install-makepkg...'
#               returncode = subprocess.call('makepkg.sh ' + packageName + ' | tee -a /var/cache/alps/logs/' + packageName + '.log', shell=True)
#               if returncode != 0:
#                   print 'Error occured while running build/installation for ' + packageName + '. Aborting.'
#                   exit(1)
#               else:
#                   print 'Build-install-makepkg succeeded. Running post-installation tasks...'
#                   returncode = subprocess.call('sudo /var/cache/alps/scripts/' + packageName + '-appconfig.sh postinstall | tee -a /var/cache/alps/logs/' + packageName + '.log', shell=True)
#                   if returncode != 0:
#                       print 'Post installation tasks failed for : ' + packageName + '.sh. Aborting.'
#                       exit(1)
#                   else:
#                       print 'Build-Install-Makepkg succeeded.'
#       else:
#           print 'No config scripts found. Running straightforward build-install-makepkg...'
#           returncode = subprocess.call('makepkg.sh ' + packageName + ' | tee -a /var/cache/alps/logs/' + packageName + '.log', shell=True)
#           if returncode != 0:
#               print 'Error occured while running build/installation for ' + packageName + '. Aborting.'
#               exit(1)
#           else:
#               print 'Build-Install-Makepkg succeeded.'

def runCommand(cmd, actionName):
    p = subprocess.Popen(cmd)
    p.wait()
    if p.returncode != 0:
        print 'Error occured in performing operation: ' + actionName
        print 'Aborting...'
        exit()

def installAction(prompt=True):
    packages = []
    for i in range(2, len(sys.argv)):
        packages.append(sys.argv[i])
    allDependencies = getAllDependencies(packages)
    if len(allDependencies) > 0:
        getConfirmation(allDependencies, 'install', prompt)
    else:
        print 'All packages have been installed.'
        print 'If you want to still enforce installation use the following: \n\nalps forceinstall packagenames\n\nBye!'

def addFileToRemoveToQueue(packageName, queue):
    packages = []
    for package in listScripts:
        file = open(package)
        data = file.read()
        lines = data.split('\n')
        for line in lines:
            if line.startswith('#REQ:'):
                if line.replace('#REQ:', '') != '':
                    if (packageName in line) and (packageName not in packages) and (packageName not in queue):
                        packages.append(os.path.splitext(os.path.basename(package))[0])
            if line.startswith('#REC:'):
                if line.replace('#REC:', '') != '':
                    if (packageName in line) and (packageName not in packages) and (packageName not in queue):
                        packages.append(os.path.splitext(os.path.basename(package))[0])
    print packages
    queue.extend(packages)
    for package in packages:
        addFileToRemoveToQueue(package, queue)
    if packageName not in queue:
        queue.append(packageName)
    print queue

def removeAction(prompt=True):
    for i in range(2, len(sys.argv)):
        packagesToRemove = []
        addFileToRemoveToQueue(sys.argv[i], packagesToRemove)
    if len(packagesToRemove) > 0:
        getConfirmation(packagesToRemove, 'remove', prompt)
    else:
        print 'All packages have been removed.'
        #print 'If you want to still enforce installation use the following: \n\nalps forceinstall packagenames\n\nBye!'

def forceInstallAction():
    installAction() 

def cleanAction():
    print 'Cleaning up. This might take a while...'
    subprocess.call('sudo rm -rf ' + configuration['SOURCE_DIR'] + '/*', shell=True)
    print 'Done'

def updateAction():
    file = open('/etc/lsb-release', 'r')
    data = file.read()
    lines = data.split('\n')
    for line in lines:
        parts = line.split('=')
        if len(parts) > 1:
            if parts[0] == 'DISTRIB_RELEASE':
                version = parts[1].replace('"', '')
                try:
                    os.remove("/tmp/" + version + ".zip")
                except Exception:
                    pass
                try:
                    print 'Downloading scripts from github...'
                    response = urllib2.urlopen("https://github.com/mortaromarcello/aryalinux/archive/" + version + ".zip")
                    urllib.urlretrieve ('https://github.com/mortaromarcello/aryalinux/archive/' + version + '.zip', '/tmp/' + version + '.zip')
                    runCommand(["unzip", "-qq", "-o", "/tmp/" + version+ ".zip", "aryalinux-" + version + "/blfs-new/*", "-d", "/tmp"], "Extraction of scripts tarball")
                    files = glob.glob("/tmp/aryalinux-" + version + "/blfs-new/*.sh")
                    for f in files:
                        os.chmod(f, 0755)
                        copy2(f, '/var/cache/alps/scripts')
                    print 'Scripts updated successfully'
                except urllib2.URLError:
                    print 'Could not download the scripts tarball. Aborting.'
                try:
                    os.remove("/tmp/" + version + ".zip")
                    runCommand(["rm", "-rf", "/tmp/aryalinux-" + version], "Cleaning up")
                except Exception:
                    pass

def selfUpdateAction():
    try:
        os.remove('/tmp/alps')
    except Exception:
        pass
    try:
        print 'Fetching the latest version of alps...'
        response = urllib2.urlopen('http://github.com/mortaromarcello/aryalinux/raw/2016.11/lfs/alps')
        urllib.urlretrieve('http://github.com/mortaromarcello/aryalinux/raw/2016.11/lfs/alps', '/tmp/alps')
        os.chmod('/tmp/alps', 0755)
        runCommand(['sudo', 'mv', '-f', '/tmp/alps', alpsExecutable], 'Moving alps from temp location to /usr/bin');
        print 'alps updated successfully'
    except Exception, e:
        print 'Error occured in updating alps. ' + str(e)
        print 'Aborting'

def downloadSource():
    try:
        parts = sys.argv[2].split('/')
        for part in parts:
            pass
        try:
            os.remove(configuration['SOURCE_DIR'] + '/' + part)
        except Exception, e:
            pass
        os.system('wget -c -O '+ configuration['SOURCE_DIR'] + '/' + part + ' ' + sys.argv[2])
    except Exception, e:
        print 'Error occured in downloading source.' + str(e)
        print 'Aborting'

def reinstall():
    try:
        resp = raw_input('Are you sure you want to reinstall ' + sys.argv[2] + '? (y/N) ')
        if resp == 'Y' or resp == 'y':
            f = open('/etc/alps/installed-list', 'r')
            lines = f.read().split('\n')
            f.close()
            newlines = list()
            for line in lines:
                if not line.startswith(sys.argv[2] + '=>') and len(line) != 0:
                    newlines.append(line)
            nf = open('/tmp/newlist', 'w')
            for line in newlines:
                nf.write(line + '\n')
            nf.close()
            os.system('sudo mv -v /tmp/newlist /etc/alps/installed-list')
            runPackageInstall(sys.argv[2])
    except Exception, e:
        print 'Reinstallation failed' + str(e)

def showMatchingAction():
        allscripts = subprocess.check_output('ls /var/cache/alps/scripts/*' + sys.argv[2] + '* | sed "s@/var/cache/alps/scripts/@@g" | sed "s/.sh$//g"', shell=True)
        print allscripts
        pass

def showAllAction():
        allscripts = subprocess.check_output('ls /var/cache/alps/scripts/*.sh | sed "s@/var/cache/alps/scripts/@@g" | sed "s/.sh$//g"', shell=True)
        print allscripts
        pass

def showInstalledAction():
        allinstalled = subprocess.check_output('cat /etc/alps/installed-list | cut -d= -f1', shell=True)
        print allinstalled
        pass

#
def installPkg(packageName):
    os.chdir('/')
    runCommand(['tar', '-xzvf', packageName], 'install package')
    runCommand(['sh', '/install/doinst.sh'], 'post install')
    name = glob.glob('/install/*.files.gz')
    runCommand(['cp', '-vf', name[0], configuration['INSTALLED_FILES_DIR']], 'copy installed files')
    runCommand(['rm', '-rvf', '/install'], 'remove install')
#

configuration = loadConfig(None)
distConfig = loadConfig('/etc/lsb-release')
listScripts = glob.glob(configuration['SCRIPTS_DIR'] + '/*')

if len(sys.argv) < 2:
    help()
    exit()
if sys.argv[1] == 'install':
    loadInstalled()
    installAction()
    exit()
if sys.argv[1] == 'remove':
    loadInstalled()
    removeAction()
    exit()
if sys.argv[1] == 'install-no-prompt':
        loadInstalled()
        installAction(False)
        exit()
if sys.argv[1] == 'forceinstall':
    forceInstallAction()
    exit()
if sys.argv[1] == 'clean':
    cleanAction()
    exit()
if sys.argv[1] == 'updatescripts':
    updateAction()
    exit()
if sys.argv[1] == 'selfupdate':
    selfUpdateAction()
    exit()
if sys.argv[1] == 'showall':
        if len(sys.argv) == 2:
                showAllAction()
        else:
                showMatchingAction()
        exit()
if sys.argv[1] == 'showinstalled':
        showInstalledAction()
        exit()
if sys.argv[1] == 'src':
    downloadSource()
    exit()
if sys.argv[1] == 'reinstall':
    reinstall()
    exit()
if sys.argv[1] == '--help' or sys.argv[1] == 'help':
    help()
    exit()
print 'Invalid command ' + sys.argv[1] + '\n'
help()
